package com.example.demo.generated.curddemo.curddemo.person.generated;

import com.example.demo.generated.curddemo.curddemo.person.Person;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.io.Serializable;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.demo.generated.curddemo.curddemo.person.Person}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPersonImpl implements Person , Serializable {
    @JsonProperty
    private int id;
    @JsonProperty
    private String name;
    @JsonProperty
    private Integer age;
    @JsonProperty
    private String address;
    
    protected GeneratedPersonImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getName() {
        return Optional.ofNullable(name);
    }
    
    @Override
    public OptionalInt getAge() {
        return OptionalUtil.ofNullable(age);
    }
    
    @Override
    public Optional<String> getAddress() {
        return Optional.ofNullable(address);
    }
    
    @Override
    public Person setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Person setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Person setAge(Integer age) {
        this.age = age;
        return this;
    }
    
    @Override
    public Person setAddress(String address) {
        this.address = address;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "      + Objects.toString(getId()));
        sj.add("name = "    + Objects.toString(OptionalUtil.unwrap(getName())));
        sj.add("age = "     + Objects.toString(OptionalUtil.unwrap(getAge())));
        sj.add("address = " + Objects.toString(OptionalUtil.unwrap(getAddress())));
        return "PersonImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Person)) { return false; }
        final Person thatPerson = (Person)that;
        if (this.getId() != thatPerson.getId()) { return false; }
        if (!Objects.equals(this.getName(), thatPerson.getName())) { return false; }
        if (!Objects.equals(this.getAge(), thatPerson.getAge())) { return false; }
        if (!Objects.equals(this.getAddress(), thatPerson.getAddress())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getName()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAge()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getAddress()));
        return hash;
    }
}